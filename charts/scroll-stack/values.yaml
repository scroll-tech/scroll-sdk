---
anvil:
  enabled: true

#TODO consumes too many db connection
blockscout:
  enabled: true

bridge-history-api:
  enabled: true

bridge-history-fetcher:
  enabled: true

balance-checker:
  enabled: false

chain-monitor:
  enabled: false

contracts:
  enabled: true

coordinator-api:
  enabled: true

coordinator-cron:
  enabled: true

event-watcher:
  enabled: true

frontends:
  enabled: true

gas-oracle:
  enabled: true

grafana:
  enabled: true
  fullnameOverride: grafana
  nameOverride: grafana
  adminUser: admin
  adminPassword: scroll-stack
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://prometheus-prometheus:9090
          access: proxy
          isDefault: true
          jsonData:
            timeInterval: 30s
        - name: Loki
          type: loki
          url: http://loki:3100
          access: proxy
          jsonData:
            httpHeaderName1: 'X-Scope-OrgID'
            secureJsonData:
              httpHeaderValue1: '1'
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: 'scroll'
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default/
  dashboardsConfigMaps:
    default: grafana-dashboards
  service:
    enabled: true
    annotations:
      external-dns.alpha.kubernetes.io/hostname: grafana.devnet.scroll.tech
      service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"
      service.beta.kubernetes.io/aws-load-balancer-type: nlb
      service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    type: LoadBalancer

rollup-relayer:
  enabled: true

l2geth-signer:
  enabled: true

l2geth-rpc:
  enabled: true

l2geth-bootnode:
  enabled: true

#TODO make the name of loki svc predictable for grafana to pick it as datasource
loki-stack:
  enabled: true
  loki:
    fullnameOverride: loki
    nameOverride: loki
  #TODO a bit ugly, maybe we can make this dynamic ?
  promtail:
    enabled: false
    fullnameOverride: promtail
    nameOverride: promtail
    config:
      clients:
        - url: http://loki:3100/loki/api/v1/push


blockscout-sc-verifier:
  enabled: false

rpc-gateway:
  enabled: true

postgresql:
  enabled: true
  nameOverride: postgresql
  fullnameOverride: postgresql
  global:
    postgresql:
      parameters:
        #TODO seems not work for max connection
        max_connections: 300
      auth:
        postgresPassword: "qwerty12345"
  volumePermissions:
    enabled: true
  postgresqlDatabase: G2
  postgresqlPassword: postgres
  resources:
    limits:
      cpu: "2"
      memory: "2Gi"
    requests:
      cpu: "500m"
      memory: "512Mi"
  tls:
    enabled: true
    autoGenerated: true
  probes:
    liveness:
      enabled: false
    readiness:
      enabled: false
    startup:
      enabled: false
  primary:
    extendedConfiguration: |
      max_connections = 400

kube-prometheus-stack:
  enabled: true
  nameOverride: prometheus
  fullnameOverride: prometheus
  prometheus:
    enabled: yes
  #TODO check why a svc/alert-manager still exists
  alertmanager:
    enabled: false
  grafana:
    enabled: false
  prometheus-node-exporter:
    nameOverride: node-exporter
    fullnameOverride: node-exporter
  kube-state-metrics:
    nameOverride: kube-state-metrics
    fullnameOverride: kube-state-metrics

# -- Database connection information. These will be used by init containers to create database, users and roles for
# -- each services. A user with admin privilege is required.
db:
  pg_host: "postgresql"
  pg_user: "postgres"
  pg_password: "qwerty12345"
  pg_port: "5432"
  bridge_history_password: "test1234"
  chain_monitor_password: "test1234"
  event_watcher_password: "test1234"
  gas_oracle_password: "test1234"
  rollup_relayer_password: "test1234"
  rpc_gateway_password: "test1234"